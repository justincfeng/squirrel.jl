#-----------------------------------------------------------------------
#       BEGIN   atmios.jl
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
#   PSEUDO-EPSTEIN FUNCTION
#-----------------------------------------------------------------------
function pEp( h , hc , B , Nmax )
    return  (Nmax/16.0)*(   1/(1 + ((h - hc)/(2.0*B))^2) + 
                            1/(1 + ((h - hc)/(4.0*B))^2)^2 + 
                            1/(1 + ((h - hc)/(6.0*B))^2)^3 + 
                            1/(1 + ((h - hc)/(7.0*B))^2)^4
                        )^2
end     #---------------------------------------------------------------

#-----------------------------------------------------------------------
#   LINE SHAPE FUNCTION
#-----------------------------------------------------------------------
function LSF( x , xo , σ )
    return  ( σ^2 / ( σ^2 + (x-xo)^2 ) )*
            ( σ^4 / ( σ^4 + (x-xo)^4 ) )
end     #---------------------------------------------------------------

#-----------------------------------------------------------------------
#   INDEX OF REFRACTION FOR IONOSPHERE
#-----------------------------------------------------------------------
function Δnios( h::Real , θ::Real , ϕ::Real )
    # This is a crude model which emulates ionospheric effects
    # h is height from surface in km
    tpfl=typeof(h)
    return  ( 
            pEp(h,300,50,4.02411e-5) +    # F layer
            pEp(h,130,30,1.00603e-5) +    # E layer
            pEp(h,75,5,4.02411e-6)        # D layer
            )  
end     #---------------------------------------------------------------

#-----------------------------------------------------------------------
#   TOTAL INDEX OF REFRACTION
#-----------------------------------------------------------------------
function Δntot( h::Real , θ::Real , ϕ::Real )
    # h is height from surface in km
    tpfl=typeof(h)
    return  ΔnatmStd( h ) + Δnios( h , θ , ϕ )
end     #---------------------------------------------------------------

#-----------------------------------------------------------------------
#   PERTURBATION MODELS
#-----------------------------------------------------------------------
function P( h::Real , h0::RealVec , σ::RealVec )
    tpfl=typeof(h)
    n = length(h0)
    return sum(LSF(h,h0[i],σ[i]) for i=1:n)
end

#-----------------------------------------------------------------------
#   TOTAL INDEX OF REFRACTION WITH PERTURBATION
#-----------------------------------------------------------------------
function Δntp( h::Real , θ::Real , ϕ::Real , δ1::Real=0.001
               , δ2::Real=0.010 , Patm::Function=h->1.0
               , Pion::Function=h->1.0 )
    # h is height from surface in km
    tpfl=typeof(h)

    return  ΔnatmStd( h ) * ( 1 + δ1*Patm(h) ) + 
            Δnios(h,θ,ϕ) * ( 1 + δ2*Pion(h) )
end     #---------------------------------------------------------------

#-----------------------------------------------------------------------
#   COMPUTE INDEX OF REFRACTION (SPHERICAL COORDINATES)
#-----------------------------------------------------------------------
function nIRs( RE::Real , r::Real , θ::Real , ϕ::Real , Δnf::Function )
    # RE and r in units of Earth mass
    tpfl=typeof(RE)
    um = tpfl(4.435028039117671e-6)         # Conversion factor to km
    h = (r - RE)*um                         # h in units of km
    return  one(tpfl) + Δnf(h,θ,ϕ)
end     #---------------------------------------------------------------

#-----------------------------------------------------------------------
#   COMPUTE INDEX OF REFRACTION
#-----------------------------------------------------------------------
function nIR( X::RealVec , Δnf::Function=Δntot )
    # RE and r in units of Earth mass

    xs = SphericalFromCartesian()(X[2:4])

    return  nIRs( rell(X[2:4]) , sqrt(dot(X[2:4],X[2:4])) , xs.θ , xs.ϕ 
                  , Δnf )
end     #---------------------------------------------------------------

#-----------------------------------------------------------------------
#       END     atmios.jl
#-----------------------------------------------------------------------