#-----------------------------------------------------------------------
#   FULL TEST OF BROYDEN CODE
#-----------------------------------------------------------------------

d = 12

r0 = [0.6027037403222177, 0.6823081703161471, 0.4969968192879606, 
      0.9455425492979632, 0.09666423716951855, 0.5533229648934559, 
      0.6257838591529667, 0.3219114195167574, 0.9465987429640241, 
      0.9543249417929738, 0.1987862235853426, 0.050519233798469454]

r1 = [0.45667659772446867, 0.29604904127839915, 0.36276182662693257, 
      0.05020123630607376, 0.5045105043961433, 0.21437469923464825, 
      0.9063213634872238, 0.6585306236631778, 0.14703614205907733, 
      0.5187343751664399, 0.137009564745886, 0.7477554965317557]

r2 = [0.8559101941413021, 0.8407795618867213, 0.9935645925564422, 
      0.24371648277714364, 0.5445775437567715, 0.05095659932958019, 
      0.788215773526395, 0.9845642037746567, 0.5623887100264071, 
      0.11735622784087019, 0.07719560594089825, 0.5954214792591306]


x0 = 2*r0/1000
x1 = r1
x2 = -π*r2/10

f0 = x->2*π*(x-x0)
Jac0 = ForwardDiff.jacobian(f0,zeros(d));

@test (bsolve(f0,Jac0,f0(zeros(d)),zeros(d),2*d)-x0)./x0 ≈ zeros(d)

f1 = x->(x-x0).*(x-x1)
Jac1 = ForwardDiff.jacobian(f1,zeros(d));

@test (bsolve(f1,Jac1,f1(zeros(d)),zeros(d),2*d)-x0)./x0 ≈ zeros(d)

f2 = x->(x-x0).*(x-x1).*(x-x2)
Jac2 = ForwardDiff.jacobian(f2,zeros(d));

@test (bsolve(f2,Jac2,f2(zeros(d)),zeros(d),2*d)-x0)./x0 ≈ zeros(d)
