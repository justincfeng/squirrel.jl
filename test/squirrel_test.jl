#-----------------------------------------------------------------------
#   TOLERANCES
#-----------------------------------------------------------------------

δtol = 1e-10
tol  = 1e-13

#-----------------------------------------------------------------------
#   GEODESIC SOLVER TEST
#-----------------------------------------------------------------------

η   = x->ημν()

Z0 = [0.;0.;0.;0.;1.;1.;0.;0.]      # Index raised in p's here
ZF = [1.;1.;0.;0.;-1.;1.;0.;0.]     # Index lowered in p's here
@test squirrel.gsolve(  Z0[1:4] , Z0[5:8] , η , δtol 
                        , AutoVern7(Rodas5()) ) ≈ ZF

Z0 = [0.;0.;0.;0.;1.;0.;1.;0.]      # Index raised in p's here
ZF = [1.;0.;1.;0.;-1.;0.;1.;0.]     # Index lowered in p's here
@test squirrel.gsolve(  Z0[1:4] , Z0[5:8] , η , δtol 
                        , AutoVern7(Rodas5()) ) ≈ ZF

Z0 = [0.;0.;0.;0.;1.;0.;0.;1.]      # Index raised in p's here
ZF = [1.;0.;0.;1.;-1.;0.;0.;1.]     # Index lowered in p's here
@test squirrel.gsolve(  Z0[1:4] , Z0[5:8] , η , δtol 
                        , AutoVern7(Rodas5()) ) ≈ ZF

#-----------------------------------------------------------------------
#   V34 TEST
#-----------------------------------------------------------------------

v3 = rand(3)
@test length(squirrel.V34(v3)) ≈ 4
@test squirrel.V34(v3)[2:4] == v3

#-----------------------------------------------------------------------
#   VidF TEST
#-----------------------------------------------------------------------

Zi = zeros(8,4)
Zi[6:8,1] = ones(3)
Zi[6:8,2] = 2*ones(3)
Zi[6:8,3] = 3*ones(3)
Zi[6:8,4] = 4*ones(3)

Vid = squirrel.VidF( Zi )

@test Vid[1:3] ≈ ones(3)
@test Vid[4:6] ≈ 2*ones(3)
@test Vid[7:9] ≈ 3*ones(3)
@test Vid[10:12] ≈ 4*ones(3)

#-----------------------------------------------------------------------
#   INITIAL DATA GENERATION
#-----------------------------------------------------------------------

ID4 = idg(4)

X   = ID4[1]
Xc  = ID4[2]
Zi  = ID4[3]
V   = ID4[4]
Vid  = vcat(-V[2:4,1],-V[2:4,2],-V[2:4,3],-V[2:4,4])

#-----------------------------------------------------------------------
#   ZERO FUNCTION TEST
#-----------------------------------------------------------------------

@test squirrel.zF( Vid , Zi , η , δtol ) ≈ zeros(12) atol=tol

#-----------------------------------------------------------------------
#   GEJAC TEST
#-----------------------------------------------------------------------

for i=1:4
    res = squirrel.gejac( Zi[1:4,i] , Zi[5:8,i] , η , δtol )
    @test res[1][1:4] ≈ Xc atol=tol
    @test res[1][6:8] ≈ -V[2:4,i] atol=tol
    @test res[2][1,:] ≈ -V[2:4,i] atol=tol
end

#-----------------------------------------------------------------------
#   JACOBIAN CALCULATOR TEST
#-----------------------------------------------------------------------
res = squirrel.geocJ( Zi , η , δtol )

@test res[1][6:8,:]       ≈ -V[2:4,:] atol=tol

for i=1:4
    @test res[1][1:4,i]   ≈ Xc atol=tol
end

@test res[2][1,1:3]       ≈ -V[2:4,1] atol=tol
@test res[2][5,1:3]       ≈ -V[2:4,1] atol=tol
@test res[2][9,1:3]       ≈ -V[2:4,1] atol=tol

@test res[2][1,4:6]       ≈ V[2:4,2] atol=tol
@test res[2][5,7:9]       ≈ V[2:4,3] atol=tol
@test res[2][9,10:12]     ≈ V[2:4,4] atol=tol

@test res[2][5:12,  4:6]  ≈ zeros(8,3)
@test res[2][1:4,   7:9]  ≈ zeros(4,3)
@test res[2][9:12,  7:9]  ≈ zeros(4,3)
@test res[2][1:8, 10:12]  ≈ zeros(8,3)

@test res[2][2:4,1:3]     ≈ 1.0*I(3)
@test res[2][6:8,1:3]     ≈ 1.0*I(3)
@test res[2][10:12,1:3]   ≈ 1.0*I(3)
@test res[2][2:4,4:6]     ≈ -1.0*I(3)
@test res[2][6:8,7:9]     ≈ -1.0*I(3)

#-----------------------------------------------------------------------
#   zFc TEST
#-----------------------------------------------------------------------

Zf = ones(8,4)
Zf[:,2] = -ones(8)
Zf[:,3] = -2*ones(8)
Zf[:,4] = -3*ones(8)

@test squirrel.zFc( Zf )[1:4]  ≈ 2*ones(4)
@test squirrel.zFc( Zf )[5:8]  ≈ 3*ones(4)
@test squirrel.zFc( Zf )[9:12] ≈ 4*ones(4)

#-----------------------------------------------------------------------
#   INITIAL DATA CORRECTOR TEST
#-----------------------------------------------------------------------

Zf = squirrel.idc( Zi , η , δtol , 24 ) 
@test Zf[1:4] ≈ Zi[1:4] atol=δtol*mean(Zi)/10
@test Zf[6:8] ≈ Zi[6:8] atol=δtol*mean(Zi)/10

#-----------------------------------------------------------------------
#   SINGLE LOCATOR TEST
#-----------------------------------------------------------------------

Xs = squirrel.slocator( X , η , δtol , 24 , false , zeros(4) , false )

@test Xs ≈ Xc  atol=δtol*mean(X)/10

#-----------------------------------------------------------------------
#   INITIAL DATA GENERATION (MULTI)
#-----------------------------------------------------------------------

ne  = 6
ID6 = idg(ne)

Y   = ID6[1]
Xc  = ID6[2]
Zi  = ID6[3]

#-----------------------------------------------------------------------
#   MULTI LOCATOR TEST
#-----------------------------------------------------------------------

Xs = squirrel.mlocator( Y , η , δtol , 24 , 1e-20 , 1e1 , ne )
@test Xs ≈ Xc  atol=δtol*mean(Y)/10
